{"version":3,"sources":["tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","ui","[object Object]","this","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","openVPage","register_AccountPage","account","register_VerifyPage","register_PasswordPage","register_RegSuccess","userApi","login","user","pwd","password","guest","then","retUser","tslib_es6","undefined","logined","alert","registerReturn","msg","ret","isExists","error","accountError","setVerify","toVerify","params","nick","country","mobile","email","verify","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","checkAccount","items","widget","label","placeholder","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","execute","setValue","onClick","login_Login","username","console","log","token","props","callback","clickReg","start","clickForget","footer","color","margin","withBack","top"],"mappings":"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","file":"static/js/1.bf38b705.chunk.js","sourcesContent":["import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\r\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">Âêå</span>\r\n        <span className=\"text-danger\">Ëä±</span>\r\n    </div>\r\n</div>;\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst mobileRegex = /^[0-9]*$/;\r\nconst emailRegex = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\n// /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'ÊâãÊú∫Âè∑', regex: mobileRegex},\r\n    {type:'email', caption:'ÈÇÆÁÆ±', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\n//import LoginView from './login';\r\nimport userApi from './userApi';\r\n//import RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\r\nimport { observable } from 'mobx';\r\n//const logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='ÊâãÊú∫Âè∑/ÈÇÆÁÆ±'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>ÂèëÈÄÅÈ™åËØÅÁ†Å</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = 'Ë¥¶Âè∑ÂØÜÁ†Å';\r\n    accountLabel = 'Ê≥®ÂÜåË¥¶Âè∑';\r\n    accountSubmitCaption = 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑'; \r\n    passwordPageCaption = 'Ë¥¶Âè∑ÂØÜÁ†Å';\r\n    passwordSubmitCaption = 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑'; \r\n    successText = 'Ê≥®ÂÜåÊàêÂäü';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = 'Áî®Êà∑Âêç ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = 'ÊâãÊú∫Âè∑ +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = 'ÈÇÆÁÆ± ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' Â∑≤ÁªèË¢´Ê≥®ÂÜåËøá‰∫Ü';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return 'Â∑≤ÁªèË¢´Ê≥®ÂÜå‰ΩøÁî®‰∫Ü';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = 'ÂØÜÁ†ÅÊâæÂõû';\r\n    accountLabel = 'Ë¥¶Âè∑';\r\n    accountSubmitCaption = 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑'; \r\n    passwordPageCaption = 'ÈáçÁΩÆÂØÜÁ†Å';\r\n    passwordSubmitCaption = 'Êèê‰∫§'; \r\n    successText = 'ÊàêÂäü‰øÆÊîπÂØÜÁ†Å';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return 'ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑË¥¶Âè∑';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: 'ÊâãÊú∫Âè∑ÊàñÈÇÆÁÆ±',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: 'ÂèëÈÄÅÈ™åËØÅÁ†Å'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, 'ÂøÖÈ°ªÊòØÊâãÊú∫Âè∑ÊàñÈÇÆÁÆ±');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, 'ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑÊâãÊú∫Âè∑');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: 'È™åËØÅÁ†Å',\r\n                placeholder: 'ËØ∑ËæìÂÖ•È™åËØÅÁ†Å',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '‰∏ã‰∏ÄÊ≠• >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', 'È™åËØÅÁ†ÅÈîôËØØ');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = 'ÊâãÊú∫Âè∑'; break;\r\n            case 'email': \r\n                typeText = 'ÈÇÆÁÆ±'; \r\n                extra = <><span className=\"text-danger\">Ê≥®ÊÑè</span>: ÊúâÂèØËÉΩËØØ‰∏∫ÂûÉÂúæÈÇÆ‰ª∂ÔºåËØ∑Ê£ÄÊü•<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"È™åËØÅÁ†Å\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                È™åËØÅÁ†ÅÂ∑≤ÁªèÂèëÈÄÅÂà∞{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: 'ÂØÜÁ†Å', label: 'ÂØÜÁ†Å'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: 'ÈáçÂ§çÂØÜÁ†Å', label: 'ÈáçÂ§çÂØÜÁ†Å'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return 'ÂØÜÁ†ÅÈîôËØØÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•ÂØÜÁ†ÅÔºÅ';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                Ê≥®ÂÜåË¥¶Âè∑<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        Ë¥¶Âè∑ <strong className=\"text-primary\">{account} </strong> {successText}ÔºÅ\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        Áõ¥Êé•ÁôªÂΩï\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: 'ÊâãÊú∫/ÈÇÆÁÆ±/Áî®Êà∑Âêç', label: 'ÁôªÂΩïË¥¶Âè∑'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: 'ÂØÜÁ†Å', label: 'ÂØÜÁ†Å'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: 'ÁôªÂΩï'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : 'Áî®Êà∑Âêç';\r\n            return type + 'ÊàñÂØÜÁ†ÅÈîôÔºÅ';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                Ê≥®ÂÜåË¥¶Âè∑\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = 'ÁôªÂΩï';\r\n        }\r\n        let {top} = this.props;\r\n        if (top === undefined) top = tonvaTop;\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {top}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        ÂøòËÆ∞ÂØÜÁ†Å\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}