{"version":3,"sources":["tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","ui","loginTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","[object Object]","this","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","openVPage","register_AccountPage","account","register_VerifyPage","register_PasswordPage","register_RegSuccess","userApi","login","user","pwd","password","guest","then","retUser","tslib_es6","undefined","logined","alert","registerReturn","msg","ret","isExists","error","accountError","setVerify","toVerify","params","nick","country","mobile","email","verify","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","checkAccount","items","widget","label","placeholder","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","execute","setValue","onClick","login_Login","username","console","log","token","props","callback","clickReg","start","clickForget","footer","color","margin","withBack"],"mappings":"yIAMO,MAAMA,EAA0B,CACnCC,EAAG,CACCC,EAAG,MCFEC,EAAgC,CACzCF,EAAG,CACCC,EAAG,MCLLE,EAAOC,EAAQ,IAEd,SAASC,IACZ,OAAOC,EAAA,IAAIC,SAASC,EAAA,qBAAKC,UAAU,6BAC/BD,EAAA,qBAAKC,UAAU,kCAAkCC,IAAKP,IACtDK,EAAA,qBAAKC,UAAU,4BAA2BD,EAAA,sBAAMC,UAAU,qBAAmB,UACzED,EAAA,sBAAMC,UAAU,eAAa,aAWzC,MAGME,EAAmB,CACrB,CAACC,KAAK,SAAUC,QAAQ,qBAAOC,MAJf,YAKhB,CAACF,KAAK,QAASC,QAAQ,eAAMC,MAJd,gDAOZ,SAASC,EAAUC,GAEtB,OADaL,EAAQM,KAAKC,IAA0B,IAArBA,EAAEJ,MAAMK,KAAKH,ICyBzC,MAAMI,UAA2Bd,EAAA,WAAxCe,kCAMIC,KAAAC,mBAAqB,2BACrBD,KAAAE,aAAe,2BACfF,KAAAG,qBAAuB,iCACvBH,KAAAI,oBAAsB,2BACtBJ,KAAAK,sBAAwB,iCACxBL,KAAAM,YAAc,2BAEEP,0DACZC,KAAKO,UAAUC,KAGnBT,SAASU,GACLT,KAAKS,QAAUA,EACfT,KAAKO,UAAUG,GAGnBX,aACIC,KAAKO,UAAUI,GAGnBZ,YACIC,KAAKO,UAAUK,GAGnBb,QACIc,EAAA,EACKC,MAAM,CAACC,KAAMf,KAAKS,QAASO,IAAKhB,KAAKiB,SAAUC,MAAOlC,EAAA,IAAIkC,QAC1DC,KAAWC,GAAWC,EAAA,EAAArB,UAAA,0BACHsB,IAAZF,QAIEpC,EAAA,IAAIuC,QAAQH,GAHdI,MAAM,uBAOtBzB,UAAU0B,GACN,IAAIC,EACJ,OAAQD,GACJ,QAAS,KAAM,iBACf,KAAK,EACD,OACJ,KAAK,EACDC,EAAM,sBAAS1B,KAAKS,QACpB,MACJ,KAAK,EACDiB,EAAM,uBAAU1B,KAAKS,QACrB,MACJ,KAAK,EACDiB,EAAM,gBAAQ1B,KAAKS,QAG3B,OAAOiB,EAAM,8CAGX3B,yDACF,IAAI4B,QAAYd,EAAA,EAAQe,SAAS5B,KAAKS,SAClCoB,EAAQ7B,KAAK8B,aAAaH,GAC9B,QAAcL,IAAVO,EAAqB,OAAOA,EAChCF,QAAYd,EAAA,EAAQkB,UAAU/B,KAAKS,QAAST,KAAKV,MACjDU,KAAKgC,SAAShC,KAAKS,WAIbV,aAAa6B,GACnB,GAAIA,EAAW,EAAG,MAAO,mDAGvB7B,oDACF,IAAIkC,EAAS,CACTC,UAAMZ,EACNP,KAAMf,KAAKS,QACXO,IAAKhB,KAAKiB,SACVkB,aAASb,EACTc,YAAQd,EACRe,WAAOf,EACPgB,OAAQtC,KAAKsC,QAEjB,OAAQtC,KAAKV,MACT,IAAK,SAAU2C,EAAOG,OAASpC,KAAKS,QAAS,MAC7C,IAAK,QAASwB,EAAOI,MAAQrC,KAAKS,QAEtC,IAAIkB,QAAYd,EAAA,EAAQ0B,SAASN,GACjC,OAAY,IAARN,GACA3C,EAAA,IAAIwD,aACJxC,KAAKyC,aAGFzC,KAAK0C,UAAUf,MAIvB,MAAMgB,UAAyB7C,EAAtCC,kCACIC,KAAAC,mBAAqB,2BACrBD,KAAAE,aAAe,eACfF,KAAAG,qBAAuB,iCACvBH,KAAAI,oBAAsB,2BACtBJ,KAAAK,sBAAwB,eACxBL,KAAAM,YAAc,uCAERP,0DACcc,EAAA,EAAQ+B,cAAc5C,KAAKS,QAAST,KAAKiB,SAAUjB,KAAKsC,OAAQtC,KAAKV,MACrFN,EAAA,IAAIwD,QACJxC,KAAKyC,cAKC1C,aAAa6B,GACnB,GAAiB,IAAbA,EAAgB,MAAO,oDAInC,MAAMpB,UAAoBxB,EAAA,MAA1Be,kCACYC,KAAA6C,OAAiB,CACrB,CAACC,KAAM,OAAQxD,KAAM,SAAUyD,UAAU,EAAMC,UAAW,KAC1D,CAACF,KAAM,SAAUxD,KAAM,WAIjBU,KAAAiD,IAAmBC,OAAAlE,EAAA,QAAAkE,CAAQtE,GAgB7BoB,KAAAmD,KAAO,KACJjE,EAAA,cAACF,EAAA,KAAI,CAACoE,OAAQpD,KAAKqD,WAAWpD,oBACjCf,EAAA,qBAAKC,UAAU,sBACXmE,MAAO,CAACC,WAAW,OAAQC,YAAY,SACtCzE,IACDG,EAAA,qBAAKC,UAAU,SACfD,EAAA,cAACF,EAAA,KAAI,CAAC6D,OAAQ7C,KAAK6C,OAAQY,SAAUzD,KAAKyD,SACtCC,cAAe1D,KAAK2D,SACpBC,QAAS5D,KAAK4D,QACdC,cAAc,OAKtB7D,KAAA2D,SAAW,EAAOb,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACvE8D,EAAQC,qBACR,IACIC,EAAQF,EAAQG,SADT,QAEPC,EAASzE,EAAUuE,GACvB,QAAe1C,IAAX4C,EAEA,YADAJ,EAAQK,SAJD,OAIgB,0DAG3B,IAAI7E,EAAwB4E,EAAO5E,KACnC,GAAa,WAATA,IACqB,KAAjB0E,EAAMI,QAA8B,MAAbJ,EAAM,IAE7B,YADAF,EAAQK,SAVL,OAUoB,0DAI/BnE,KAAKqD,WAAW5C,QAAUuD,EAC1BhE,KAAKqD,WAAW/D,KAAOA,EACvB,IAAIqC,QAAY3B,KAAKqD,WAAWgB,oBACpB/C,IAARK,GAAmBmC,EAAQK,SAjBpB,OAiBmCxC,MAG1C3B,KAAA4D,QAAU,EAAOd,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACtE,GAAa,SAAT8C,EACA,aAAa9C,KAAK2D,SAAS,SAAUG,MArDvC/D,iDACFC,KAAKyD,SAAW,CACZa,MAAO,CACHvD,KAAM,CACFwD,OAAQ,OACRC,MAAOxE,KAAKqD,WAAWnD,aACvBuE,YAAa,wCAEjBnC,OAAQ,CAACiC,OAAQ,SAAUpF,UAAW,iCAAkCqF,MAAO,oCAInFxE,KAAK0E,SAAS1E,KAAKmD,SA8C/B,MAAMzC,UAAmB1B,EAAA,MAAzBe,kCACYC,KAAA6C,OAAiB,CACrB,CAACC,KAAM,SAAUxD,KAAM,SAAUyD,UAAU,EAAMC,UAAW,GAC5D,CAACF,KAAM,SAAUxD,KAAM,WAGnBU,KAAA2E,gBAAkB,EAACb,EAAiBE,EAAWY,KACnDd,EAAQe,YAAY,UAAWb,GAA0B,GAAhBA,EAAMI,UAE3CpE,KAAAyD,SAAqB,CACzBa,MAAO,CACHhC,OAAQ,CACJiC,OAAQ,OACRC,MAAO,qBACPC,YAAa,uCACbK,UAAW9E,KAAK2E,iBAEpBI,OAAQ,CACJR,OAAQ,SACRpF,UAAW,iCACXqF,MAAO,uBACPQ,UAAU,KAOdhF,KAAA2D,SAAW,EAAOb,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACvE,IAAIsC,EAAStC,KAAKqD,WAAWf,OAASwB,EAAQG,SAAS,UAE3C,WADIpD,EAAA,EAAQoE,YAAYjF,KAAKqD,WAAW5C,QAAS6B,IAK7DtC,KAAKqD,WAAW6B,aAHZpB,EAAQK,SAAS,SAAU,qCAM3BnE,KAAA4D,QAAU,EAAOd,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACtE,GAAa,WAAT8C,EACA,aAAa9C,KAAK2D,SAAS,SAAUG,MAGrC9D,KAAAmD,KAAO,MACX,IAAIgC,EAAiBC,EACrB,OAAQpF,KAAKqD,WAAW/D,MACpB,IAAK,SAAU6F,EAAW,qBAAO,MACjC,IAAK,QACDA,EAAW,eACXC,EAAQlG,EAAA,cAAAA,EAAA,cAAEA,EAAA,sBAAMC,UAAU,eAAa,mGAAyBD,EAAA,0BAGxE,OAAOA,EAAA,cAACF,EAAA,KAAI,CAACoE,OAAO,sBAChBlE,EAAA,qBAAKC,UAAU,sBACXmE,MAAO,CAACC,WAAW,OAAQC,YAAY,4DAC9B2B,EAASjG,EAAA,yBAClBA,EAAA,qBAAKC,UAAU,wCAAuCD,EAAA,uBAAIc,KAAKqD,WAAW5C,UACzE2E,EACDlG,EAAA,qBAAKC,UAAU,SACfD,EAAA,cAACF,EAAA,KAAI,CAAC6D,OAAQ7C,KAAK6C,OAAQY,SAAUzD,KAAKyD,SACtCC,cAAe1D,KAAK2D,SACpBC,QAAS5D,KAAK4D,QACdC,cAAc,QArCxB9D,iDACFC,KAAK0E,SAAS1E,KAAKmD,SA0C3B,MAAMxC,UAAqB3B,EAAA,MAA3Be,kCACYC,KAAA6C,OAAiB,CACrB,CAACC,KAAM,MAAOxD,KAAM,SAAUyD,UAAU,EAAMC,UAAW,KACzD,CAACF,KAAM,QAASxD,KAAM,SAAUyD,UAAU,EAAMC,UAAW,KAC3D,CAACF,KAAM,SAAUxD,KAAM,WAanBU,KAAA2D,SAAW,EAAOb,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACvE,IAAIqF,EAASvB,EAAQwB,KAAKC,MACtBvE,IAACA,EAAGwE,MAAEA,GAASH,EACnB,OAAKrE,GAAOA,IAAQwE,GAKpBxF,KAAKqD,WAAWpC,SAAWD,QACdhB,KAAKqD,WAAWoC,YALzB3B,EAAQ4B,SAAS,MAAO,IACxB5B,EAAQ4B,SAAS,QAAS,IACnB,qFAKP1F,KAAA4D,QAAU,EAAOd,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACtE,GAAa,UAAT8C,EACA,aAAa9C,KAAK2D,SAAS,SAAUG,MAGrC9D,KAAAmD,KAAO,KACJjE,EAAA,cAACF,EAAA,KAAI,CAACoE,OAAQpD,KAAKqD,WAAWjD,qBACjClB,EAAA,qBAAKC,UAAU,sBACXmE,MAAO,CAACC,WAAW,OAAQC,YAAY,oCACnCtE,EAAA,yBACJA,EAAA,qBAAKC,UAAU,wCAAuCD,EAAA,uBAAIc,KAAKqD,WAAW5C,UAC1EvB,EAAA,qBAAKC,UAAU,SACfD,EAAA,cAACF,EAAA,KAAI,CAAC6D,OAAQ7C,KAAK6C,OAAQY,SAAUzD,KAAKyD,SACtCC,cAAe1D,KAAK2D,SACpBC,QAAS5D,KAAK4D,QACdC,cAAc,OApCxB9D,iDACFC,KAAKyD,SAAW,CACZa,MAAO,CACHtD,IAAK,CAACuD,OAAQ,WAAYE,YAAa,eAAMD,MAAO,gBACpDgB,MAAO,CAACjB,OAAQ,WAAYE,YAAa,2BAAQD,MAAO,4BACxDO,OAAQ,CAACR,OAAQ,SAAUpF,UAAW,iCAAkCqF,MAAOxE,KAAKqD,WAAWhD,yBAGvGL,KAAK0E,SAAS1E,KAAKmD,SAkC3B,MAAMvC,UAAmB5B,EAAA,MAAzBe,kCAKYC,KAAAmD,KAAO,MACX,MAAM1C,QAACA,EAAOH,YAAEA,GAAeN,KAAKqD,WACpC,OACAnE,EAAA,cAACF,EAAA,KAAI,CAACoE,QAAQ,GACVlE,EAAA,qBAAKC,UAAU,uBACXD,EAAA,sBAAMC,UAAU,QACZD,EAAA,qBAAKC,UAAU,wBACRD,EAAA,wBAAQC,UAAU,gBAAgBsB,WAAoBH,YAE7DpB,EAAA,wBAAQC,UAAU,4BAA4BwG,QAAS,IAAM3F,KAAKqD,WAAWvC,SAAO,iCAb9Ff,iDACFC,KAAK0E,SAAS1E,KAAKmD,+CC9V3B,MAAMN,EAAiB,CACnB,CAACC,KAAM,WAAYxD,KAAM,SAAUyD,UAAU,EAAMC,UAAW,KAC9D,CAACF,KAAM,WAAYxD,KAAM,SAAUyD,UAAU,EAAMC,UAAW,KAC9D,CAACF,KAAM,QAASxD,KAAM,WASX,MAAMsG,UAAc1G,EAAA,UAAnCa,kCACYC,KAAAiD,IAAgBC,OAAAlE,EAAA,QAAAkE,CAAQzE,GACxBuB,KAAAyD,SAAqB,CACzBa,MAAO,CACHuB,SAAU,CAACpB,YAAa,+CAAaD,MAAO,4BAC5CvD,SAAU,CAACsD,OAAQ,WAAYE,YAAa,eAAMD,MAAO,gBACzD1D,MAAO,CAACyD,OAAQ,SAAUpF,UAAW,iCAAkCqF,MAAO,kBAI9ExE,KAAA2D,SAAW,EAAOb,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACvE,IAAIqF,EAASvB,EAAQwB,KAAKC,KACtB7F,EAAK2F,EAAiB,SACtBrE,EAAMqE,EAAiB,SAC3B,QAAY/D,IAARN,EACA,MAAO,oCAEX,IAAID,QAAaF,EAAA,EAAQC,MAAM,CAC3BC,KAAMrB,EACNsB,IAAKA,EACLE,MAAOlC,EAAA,IAAIkC,QAGf,QAAaI,IAATP,EAAoB,CACpB,IAAImD,EAASzE,EAAUC,GAEvB,YAD6B4B,IAAX4C,EAAsBA,EAAO3E,QAAU,sBAC3C,iCAElBuG,QAAQC,IAAI,gCAAiChF,EAAK+B,KAAM/B,EAAKiF,aACvDhH,EAAA,IAAIuC,QAAQR,EAAMf,KAAKiG,MAAMC,aAE/BlG,KAAA4D,QAAU,EAAOd,EAAagB,IAAoCzC,EAAA,EAAArB,UAAA,qBACtE,GAAa,aAAT8C,EACA,aAAa9C,KAAK2D,SAAS,QAASG,MAGpC9D,KAAAmG,SAAW,MAEA,IAAIrG,OAAmBwB,GAC7B8E,UAELpG,KAAAqG,YAAc,MACL,IAAI1D,OAAiBrB,GAC3B8E,UAEXrG,SACI,IAAIuG,EAASpH,EAAA,qBAAKC,UAAU,eACxBD,EAAA,wBAAQC,UAAU,eAAeoH,MAAM,OAAOjD,MAAO,CAACkD,OAAO,YACzDb,QAAS3F,KAAKmG,UAAQ,6BAI1B/C,GAAoC,EAIxC,OAH4B,IAAxBpD,KAAKiG,MAAMQ,WACXrD,EAAS,gBAENlE,EAAA,cAACF,EAAA,KAAI,CAACoE,OAAQA,EAAQkD,OAAQA,GACjCpH,EAAA,qBAAKC,UAAU,sEACXD,EAAA,qBAAKC,UAAU,cACfD,EAAA,qBAAKC,UAAU,SACVJ,IACDG,EAAA,qBAAKC,UAAU,SACfD,EAAA,cAACF,EAAA,KAAI,CAAC6D,OAAQA,EAAQY,SAAUzD,KAAKyD,SACjCC,cAAe1D,KAAK2D,SACpBC,QAAS5D,KAAK4D,QACdC,cAAc,IAClB3E,EAAA,wBAAQC,UAAU,yBACdwG,QAAS,IAAM3F,KAAKqG,eAAa,6BAIzCnH,EAAA,qBAAKC,UAAU,cACfD,EAAA,qBAAKC,UAAU","file":"static/js/1.411bd6e7.chunk.js","sourcesContent":["import { Res } from \"../../ui\";\n\nexport interface LoginRes {\n    a: string;\n}\n\nexport const loginRes: Res<LoginRes> = {\n    _: {\n        a: 'd',\n    }\n}\n","import { Res } from \"../../ui\";\n\nexport interface RegisterRes {\n    a: string;\n}\n\nexport const registerRes: Res<RegisterRes> = {\n    _: {\n        a: 'd',\n    }\n}\n","import * as React from 'react';\nimport { nav } from '../ui';\n\nconst logo = require('../img/logo.svg');\n\nexport function tonvaTop() {\n    return nav.loginTop(<div className=\"d-flex align-items-center\">\n        <img className=\"App-logo h-3c position-absolute\" src={logo} />\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">Âêå</span>\n            <span className=\"text-danger\">Ëä±</span>\n        </div>\n    </div>);\n}\n\ninterface Sender {\n    type: string;\n    caption: string;\n    regex: RegExp;\n}\n\nconst mobileRegex = /^[0-9]*$/;\nconst emailRegex = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\n// /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/\nconst senders:Sender[] = [\n    {type:'mobile', caption:'ÊâãÊú∫Âè∑', regex: mobileRegex},\n    {type:'email', caption:'ÈÇÆÁÆ±', regex: emailRegex}\n];\n\nexport function getSender(un: string):Sender {\n    let sender = senders.find(v => v.regex.test(un) === true);\n    return sender;\n}","import * as React from 'react';\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\nimport userApi from './userApi';\nimport '../css/va-form.css';\nimport { RegisterRes, registerRes } from './res';\nimport { tonvaTop, getSender } from './tools';\n\nexport interface Values {\n    user: string;\n    pwd: string;\n    rePwd: string;\n    country?: string;\n    mobile?: string;\n    email?: string;\n}\n/*\nclass AccountInput extends TextWidget {\n    @observable private buttonDisabled: boolean = true;\n    private onClick = () => {\n        let {onButtonClick} = this.context.form.props;\n        if (onButtonClick === undefined) return;\n        onButtonClick(this.name, this.context);\n    }\n    protected onChange(evt: React.ChangeEvent<any>) {\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\n    }\n    render() {\n        return <>\n            <div className=\"input-group\">\n                <input ref={input=>this.input = input}\n                            className=\"form-control\"\n                            type={this.inputType}\n                            defaultValue={this.value}\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\n                            placeholder='ÊâãÊú∫Âè∑/ÈÇÆÁÆ±'\n                            readOnly={this.readOnly}\n                            disabled={this.disabled}\n                            onKeyDown = {this.onKeyDown}\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-sm btn-outline-primary\"\n                        type=\"button\" disabled={this.buttonDisabled}\n                        onClick={this.onClick}>\n                        <small>ÂèëÈÄÅÈ™åËØÅÁ†Å</small>\n                    </button>\n                </div>\n            </div>\n            {this.renderErrors()}\n        </>;\n    }\n}\n*/\nexport class RegisterController extends Controller {\n    account: string;\n    type:'mobile'|'email';\n    password: string;\n    verify: string;\n\n    accountPageCaption = 'Ë¥¶Âè∑ÂØÜÁ†Å';\n    accountLabel = 'Ê≥®ÂÜåË¥¶Âè∑';\n    accountSubmitCaption = 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑'; \n    passwordPageCaption = 'Ë¥¶Âè∑ÂØÜÁ†Å';\n    passwordSubmitCaption = 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑'; \n    successText = 'Ê≥®ÂÜåÊàêÂäü';\n\n    protected async internalStart() {\n        this.openVPage(AccountPage);\n    }\n\n    toVerify(account:string) {\n        this.account = account;\n        this.openVPage(VerifyPage);\n    }\n\n    toPassword() {\n        this.openVPage(PasswordPage);\n    }\n\n    toSuccess() {\n        this.openVPage(RegSuccess);\n    }\n\n    login() {\n        userApi\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\n            .then(async retUser => {\n                if (retUser === undefined) {\n                    alert('something wrong!');\n                    return;\n                }\n                await nav.logined(retUser);\n            });\n    }\n\n    regReturn(registerReturn:number):string {\n        let msg:any;\n        switch (registerReturn) {\n            default: throw 'unknown return';\n            case 0:\n                return;\n            case 1:\n                msg = 'Áî®Êà∑Âêç ' + this.account;\n                break;\n            case 2:\n                msg = 'ÊâãÊú∫Âè∑ +' + this.account;\n                break;\n            case 3:\n                msg = 'ÈÇÆÁÆ± ' + this.account;\n                break;\n        }\n        return msg + ' Â∑≤ÁªèË¢´Ê≥®ÂÜåËøá‰∫Ü';\n    }\n\n    async checkAccount():Promise<string> {\n        let ret = await userApi.isExists(this.account);\n        let error = this.accountError(ret);\n        if (error !== undefined) return error;\n        ret = await userApi.setVerify(this.account, this.type);\n        this.toVerify(this.account);\n        return;\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists > 0) return 'Â∑≤ÁªèË¢´Ê≥®ÂÜå‰ΩøÁî®‰∫Ü';\n    }\n\n    async execute() {\n        let params = {\n            nick: undefined,\n            user: this.account, \n            pwd: this.password,\n            country: undefined,\n            mobile: undefined,\n            email: undefined,\n            verify: this.verify\n        }\n        switch (this.type) {\n            case 'mobile': params.mobile = this.account; break;\n            case 'email': params.email = this.account; break;\n        }\n        let ret = await userApi.register(params);\n        if (ret === 0) {\n            nav.clear();\n            this.toSuccess();\n            return;\n        }\n        return this.regReturn(ret);\n    }\n}\n\nexport class ForgetController extends RegisterController {\n    accountPageCaption = 'ÂØÜÁ†ÅÊâæÂõû';\n    accountLabel = 'Ë¥¶Âè∑';\n    accountSubmitCaption = 'Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑'; \n    passwordPageCaption = 'ÈáçÁΩÆÂØÜÁ†Å';\n    passwordSubmitCaption = 'Êèê‰∫§'; \n    successText = 'ÊàêÂäü‰øÆÊîπÂØÜÁ†Å';\n\n    async execute() {\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\n        nav.clear();\n        this.toSuccess();\n        return undefined;\n        //return this.regReturn(ret);\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists === 0) return 'ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑË¥¶Âè∑';\n    }\n}\n\nclass AccountPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'verify', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n\n    protected res: RegisterRes = resLang(registerRes);\n    async open() {\n        this.uiSchema = {\n            items: {\n                user: {\n                    widget: 'text',\n                    label: this.controller.accountLabel,\n                    placeholder: 'ÊâãÊú∫Âè∑ÊàñÈÇÆÁÆ±',\n                } as UiTextItem, \n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: 'ÂèëÈÄÅÈ™åËØÅÁ†Å'} as UiButton,\n            }\n        }\n                \n            this.openPage(this.page);\n    }\n\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.accountPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                {tonvaTop()}\n                <div className=\"h-3c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit}\n                    onEnter={this.onEnter} \n                    requiredFlag={false} />\n            </div>\n        </Page>;\n    }\n\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        context.clearContextErrors();\n        let user = 'user';\n        let value = context.getValue(user);\n        let sender = getSender(value);\n        if (sender === undefined) {\n            context.setError(user, 'ÂøÖÈ°ªÊòØÊâãÊú∫Âè∑ÊàñÈÇÆÁÆ±');\n            return;\n        }\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\n        if (type === 'mobile') {\n            if (value.length !== 11 || value[0] !== '1') {\n                context.setError(user, 'ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑÊâãÊú∫Âè∑');\n                return;\n            }\n        }\n        this.controller.account = value;\n        this.controller.type = type;\n        let ret = await this.controller.checkAccount();\n        if (ret !== undefined) context.setError(user, ret);\n    }\n\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'user') {\n            return await this.onSubmit('verify', context);\n        }\n    }\n}\n\nclass VerifyPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\n        context.setDisabled('submit', !value || (value.length != 6));\n    }\n    private uiSchema: UiSchema = {\n        items: {\n            verify: {\n                widget: 'text',\n                label: 'È™åËØÅÁ†Å',\n                placeholder: 'ËØ∑ËæìÂÖ•È™åËØÅÁ†Å',\n                onChanged: this.onVerifyChanged,\n            } as UiTextItem, \n            submit: {\n                widget: 'button', \n                className: 'btn btn-primary btn-block mt-3', \n                label: '‰∏ã‰∏ÄÊ≠• >',\n                disabled: true\n            } as UiButton,\n        }\n    }\n    async open() {\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let verify = this.controller.verify = context.getValue('verify');\n        let ret = await userApi.checkVerify(this.controller.account, verify);\n        if (ret === 0) {\n            context.setError('verify', 'È™åËØÅÁ†ÅÈîôËØØ');\n            return;\n        }\n        this.controller.toPassword();\n    }\n\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'verify') {\n            return await this.onSubmit('submit', context);\n        }\n    }\n    private page = ():JSX.Element => {\n        let typeText:string, extra:any;\n        switch (this.controller.type) {\n            case 'mobile': typeText = 'ÊâãÊú∫Âè∑'; break;\n            case 'email': \n                typeText = 'ÈÇÆÁÆ±'; \n                extra = <><span className=\"text-danger\">Ê≥®ÊÑè</span>: ÊúâÂèØËÉΩËØØ‰∏∫ÂûÉÂúæÈÇÆ‰ª∂ÔºåËØ∑Ê£ÄÊü•<br/></>;\n                break;\n        }\n        return <Page header=\"È™åËØÅÁ†Å\">\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                È™åËØÅÁ†ÅÂ∑≤ÁªèÂèëÈÄÅÂà∞{typeText}<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                {extra}\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit} \n                    onEnter={this.onEnter}\n                    requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass PasswordPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n    async open() {\n        this.uiSchema = {\n            items: {\n                pwd: {widget: 'password', placeholder: 'ÂØÜÁ†Å', label: 'ÂØÜÁ†Å'} as UiPasswordItem,\n                rePwd: {widget: 'password', placeholder: 'ÈáçÂ§çÂØÜÁ†Å', label: 'ÈáçÂ§çÂØÜÁ†Å'} as UiPasswordItem,\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\n            }\n        }\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values = context.form.data;\n        let {pwd, rePwd} = values;\n        if (!pwd || pwd !== rePwd) {\n            context.setValue('pwd', '');\n            context.setValue('rePwd', '');\n            return 'ÂØÜÁ†ÅÈîôËØØÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•ÂØÜÁ†ÅÔºÅ';\n        }\n        this.controller.password = pwd;\n        return await this.controller.execute();\n    }\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'rePwd') {\n            return await this.onSubmit('submit', context);\n        }\n    }\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.passwordPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                Ê≥®ÂÜåË¥¶Âè∑<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \n                    onButtonClick={this.onSubmit}\n                    onEnter={this.onEnter}\n                    requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass RegSuccess extends VPage<RegisterController> {\n    async open() {\n        this.openPage(this.page);\n    }\n\n    private page = () => {\n        const {account, successText} = this.controller;\n        return (\n        <Page header={false}>\n            <div className=\"container w-max-30c\">\n                <form className=\"my-5\">\n                    <div className=\"py-5\">\n                        Ë¥¶Âè∑ <strong className=\"text-primary\">{account} </strong> {successText}ÔºÅ\n                    </div>\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\n                        Áõ¥Êé•ÁôªÂΩï\n                    </button>\n                </form>\n            </div>\n        </Page>\n        );\n    }\n}\n","import * as React from 'react';\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\nimport { RegisterController, ForgetController } from './register';\nimport userApi from './userApi';\nimport { LoginRes, loginRes } from './res';\nimport { tonvaTop, getSender } from './tools';\nimport { User } from '../user';\n\nconst schema: Schema = [\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\n    {name: 'login', type: 'submit'},\n];\n\nexport interface LoginProps {\n    withBack?: boolean;\n    callback?: (user:User) => Promise<void>;\n    //top?: any;\n}\n\nexport default class Login extends React.Component<LoginProps> {\n    private res: LoginRes = resLang(loginRes);\n    private uiSchema: UiSchema = {\n        items: {\n            username: {placeholder: 'ÊâãÊú∫/ÈÇÆÁÆ±/Áî®Êà∑Âêç', label: 'ÁôªÂΩïË¥¶Âè∑'} as UiTextItem,\n            password: {widget: 'password', placeholder: 'ÂØÜÁ†Å', label: 'ÂØÜÁ†Å'} as UiPasswordItem,\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: 'ÁôªÂΩï'} as UiButton,\n        }\n    }\n\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values = context.form.data;\n        let un = values['username'];\n        let pwd = values['password'];\n        if (pwd === undefined) {\n            return 'something wrong, pwd is undefined';\n        }\n        let user = await userApi.login({\n            user: un,\n            pwd: pwd,\n            guest: nav.guest,\n        });\n\n        if (user === undefined) {\n            let sender = getSender(un);\n            let type:string = sender !== undefined? sender.caption : 'Áî®Êà∑Âêç';\n            return type + 'ÊàñÂØÜÁ†ÅÈîôÔºÅ';\n        }\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\n        await nav.logined(user, this.props.callback);\n    }\n    private onEnter = async (name:string, context:Context):Promise<string> => {\n        if (name === 'password') {\n            return await this.onSubmit('login', context);\n        }\n    }\n    private clickReg = () => {\n        //nav.replace(<RegisterView />);\n        let register = new RegisterController(undefined);\n        register.start();\n    }\n    private clickForget = () => {\n        let forget = new ForgetController(undefined);\n        forget.start();\n    }\n    render() {\n        let footer = <div className='text-center'>\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\n                onClick={this.clickReg}>\n                Ê≥®ÂÜåË¥¶Âè∑\n            </button>\n        </div>;\n        let header:string|boolean|JSX.Element = false;\n        if (this.props.withBack === true) {\n            header = 'ÁôªÂΩï';\n        }\n        return <Page header={header} footer={footer}>\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\n                <div className=\"flex-fill\" />\n                <div className=\"w-20c\">\n                    {tonvaTop()}\n                    <div className=\"h-2c\" />\n                    <Form schema={schema} uiSchema={this.uiSchema} \n                        onButtonClick={this.onSubmit} \n                        onEnter={this.onEnter}\n                        requiredFlag={false} />\n                    <button className=\"btn btn-link btn-block\"\n                        onClick={() => this.clickForget()}>\n                        ÂøòËÆ∞ÂØÜÁ†Å\n                    </button>\n                </div>\n                <div className=\"flex-fill\" />\n                <div className=\"flex-fill\" />\n            </div>\n        </Page>;\n    }\n}\n"],"sourceRoot":""}