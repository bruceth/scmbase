{"version":3,"sources":["tonva-tools/entry/userApi.ts","tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["entry_userApi","net","[object Object]","params","ret","this","get","Object","tonva_tools_user","token","user","nick","icon","post","account","type","verify","password","undefined","loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","caption","regex","getSender","un","find","v","test","tslib_es6","mobx_module","widgets","buttonDisabled","onClick","onButtonClick","context","form","props","name","evt","target","value","trim","length","ref","input","inputType","defaultValue","onChange","placeholder","readOnly","disabled","onKeyDown","onFocus","onBlur","maxLength","itemSchema","renderErrors","register_RegisterController","ui","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","openVPage","register_AccountPage","register_VerifyPage","register_PasswordPage","register_RegSuccess","login","pwd","guest","then","retUser","logined","alert","registerReturn","msg","isExists","error","accountError","setVerify","toVerify","country","mobile","email","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","required","res","page","header","controller","style","marginLeft","marginRight","uiSchema","onSubmit","requiredFlag","clearContextErrors","getValue","sender","setError","checkAccount","items","widget","label","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","checkVerify","toPassword","typeText","extra","values","data","rePwd","execute","setValue","login_Login","username","console","log","callback","clickReg","start","clickForget","top","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.3b377430.chunk.js","sourcesContent":["import {CenterApi} from '../net';\nimport {User, decodeUserToken} from '../user';\n//import { nav } from '../ui';\n\nexport class UserApi extends CenterApi {\n    async login(params: {user: string, pwd: string, guest: number}): Promise<any> {\n        //(params as any).device = nav.local.device.get();\n        let ret = await this.get('login', params);\n        switch (typeof ret) {\n            default: return;\n            case 'string': return decodeUserToken(ret);\n            case 'object':\n                let token = ret.token;\n                let user = decodeUserToken(token);\n                let {nick, icon} = ret;\n                if (nick) user.nick = nick;\n                if (icon) user.icon = icon;\n                return user;\n        }\n        // !== undefined) return decodeToken(token);\n    }\n    async register(params: {\n        nick:string, \n        user:string, \n        pwd:string,\n        country:number, \n        mobile:number, \n        email:string,\n        verify:string,\n    }): Promise<any>\n    {\n        return await this.post('register', params);\n    }\n\n    async setVerify(account:string, type:'mobile'|'email') {\n        return await this.post('set-verify', {account:account, type:type});\n    }\n\n    async checkVerify(account:string, verify:string) {\n        return await this.post('check-verify', {account:account, verify:verify});\n    }\n\n    async isExists(account:string) {\n        return await this.get('is-exists', {account:account});\n    }\n\n    async resetPassword(account:string, password:string, verify:string, type:'mobile'|'email') {\n        return await this.post('reset-password', {account:account, password, verify, type});\n    }\n}\n\nconst userApi = new UserApi('tv/user/', undefined);\n\nexport default userApi;\n","import { Res } from \"../../ui\";\n\nexport interface LoginRes {\n    a: string;\n}\n\nexport const loginRes: Res<LoginRes> = {\n    _: {\n        a: 'd',\n    }\n}\n","import { Res } from \"../../ui\";\n\nexport interface RegisterRes {\n    a: string;\n}\n\nexport const registerRes: Res<RegisterRes> = {\n    _: {\n        a: 'd',\n    }\n}\n","import * as React from 'react';\n\nconst logo = require('../img/logo.svg');\n\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\n        <span className=\"text-danger\">花</span>\n    </div>\n</div>;\n\ninterface Sender {\n    type: string;\n    caption: string;\n    regex: RegExp;\n}\nconst senders:Sender[] = [\n    {type:'mobile', caption:'手机号', regex: /^[0-9]*$/},\n    {type:'email', caption:'邮箱', regex: /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/}\n];\n\nexport function getSender(un: string):Sender {\n    let sender = senders.find(v => v.regex.test(un) === true);\n    return sender;\n}","import * as React from 'react';\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\n//import LoginView from './login';\nimport userApi from './userApi';\n//import RegSuccess from './regSuccess';\nimport '../css/va-form.css';\nimport { RegisterRes, registerRes } from './res';\nimport { tonvaTop, getSender } from './tools';\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\nimport { observable } from 'mobx';\n//const logo = require('../img/logo.svg');\n\nexport interface Values {\n    user: string;\n    pwd: string;\n    rePwd: string;\n    country?: string;\n    mobile?: string;\n    email?: string;\n}\n\nclass AccountInput extends TextWidget {\n    @observable private buttonDisabled: boolean = true;\n    private onClick = () => {\n        let {onButtonClick} = this.context.form.props;\n        if (onButtonClick === undefined) return;\n        onButtonClick(this.name, this.context);\n    }\n    protected onChange(evt: React.ChangeEvent<any>) {\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\n    }\n    render() {\n        return <>\n            <div className=\"input-group\">\n                <input ref={input=>this.input = input}\n                            className=\"form-control\"\n                            type={this.inputType}\n                            defaultValue={this.value}\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\n                            placeholder='手机号/邮箱'\n                            readOnly={this.readOnly}\n                            disabled={this.disabled}\n                            onKeyDown = {this.onKeyDown}\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-sm btn-outline-primary\"\n                        type=\"button\" disabled={this.buttonDisabled}\n                        onClick={this.onClick}>\n                        <small>发送验证码</small>\n                    </button>\n                </div>\n            </div>\n            {this.renderErrors()}\n        </>;\n    }\n}\n\nexport class RegisterController extends Controller {\n    account: string;\n    type:'mobile'|'email';\n    password: string;\n    verify: string;\n\n    accountPageCaption = '账号密码';\n    accountLabel = '注册账号';\n    accountSubmitCaption = '注册新账号'; \n    passwordPageCaption = '账号密码';\n    passwordSubmitCaption = '注册新账号'; \n    successText = '注册成功';\n\n    protected async internalStart() {\n        this.openVPage(AccountPage);\n    }\n\n    toVerify(account:string) {\n        this.account = account;\n        this.openVPage(VerifyPage);\n    }\n\n    toPassword() {\n        this.openVPage(PasswordPage);\n    }\n\n    toSuccess() {\n        this.openVPage(RegSuccess);\n    }\n\n    login() {\n        userApi\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\n            .then(async retUser => {\n                if (retUser === undefined) {\n                    alert('something wrong!');\n                    return;\n                }\n                await nav.logined(retUser);\n            });\n    }\n\n    regReturn(registerReturn:number):string {\n        let msg:any;\n        switch (registerReturn) {\n            default: throw 'unknown return';\n            case 0:\n                return;\n            case 1:\n                msg = '用户名 ' + this.account;\n                break;\n            case 2:\n                msg = '手机号 +' + this.account;\n                break;\n            case 3:\n                msg = '邮箱 ' + this.account;\n                break;\n        }\n        return msg + ' 已经被注册过了';\n    }\n\n    async checkAccount():Promise<string> {\n        let ret = await userApi.isExists(this.account);\n        let error = this.accountError(ret);\n        if (error !== undefined) return error;\n        ret = await userApi.setVerify(this.account, this.type);\n        this.toVerify(this.account);\n        return;\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists > 0) return '已经被注册使用了';\n    }\n\n    async execute() {\n        let params = {\n            nick: undefined,\n            user: this.account, \n            pwd: this.password,\n            country: undefined,\n            mobile: undefined,\n            email: undefined,\n            verify: this.verify\n        }\n        switch (this.type) {\n            case 'mobile': params.mobile = this.account; break;\n            case 'email': params.email = this.account; break;\n        }\n        let ret = await userApi.register(params);\n        if (ret === 0) {\n            nav.clear();\n            this.toSuccess();\n            return;\n        }\n        return this.regReturn(ret);\n    }\n}\n\nexport class ForgetController extends RegisterController {\n    accountPageCaption = '密码找回';\n    accountLabel = '账号';\n    accountSubmitCaption = '注册新账号'; \n    passwordPageCaption = '重置密码';\n    passwordSubmitCaption = '提交'; \n    successText = '成功修改密码';\n\n    async execute() {\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\n        nav.clear();\n        this.toSuccess();\n        return undefined;\n        //return this.regReturn(ret);\n    }\n\n    protected accountError(isExists: number) {\n        if (isExists === 0) return '请输入正确的账号';\n    }\n}\n\nclass AccountPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\n        //{name: 'verify', type: 'string', required: true, maxLength: 6} as StringSchema,\n        //{name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        //{name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'verify', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n            \n    protected res: RegisterRes = resLang(registerRes);\n    async open() {\n        this.uiSchema = {\n            items: {\n                user: {\n                    widget: 'text',\n                    label: this.controller.accountLabel,\n                    placeholder: '手机号或邮箱',\n                } as UiTextItem, \n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\n            }\n        }\n                \n            this.openPage(this.page);\n    }\n\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.accountPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                {tonvaTop}\n                <div className=\"h-3c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\n            </div>\n        </Page>;\n    }\n\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        context.clearContextErrors();\n        let user = 'user';\n        let value = context.getValue(user);\n        let sender = getSender(value);\n        if (sender === undefined) {\n            context.setError(user, '必须是手机号或邮箱');\n            return;\n        }\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\n        if (type === 'mobile') {\n            if (value.length !== 11 || value[0] !== '1') {\n                context.setError(user, '请输入正确的手机号');\n                return;\n            }\n        }\n        this.controller.account = value;\n        this.controller.type = type;\n        let ret = await this.controller.checkAccount();\n        if (ret !== undefined) context.setError(user, ret);\n    }\n}\n\nclass VerifyPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\n        context.setDisabled('submit', !value || (value.length != 6));\n    }\n    private uiSchema: UiSchema = {\n        items: {\n            verify: {\n                widget: 'text',\n                label: '验证码',\n                placeholder: '请输入验证码',\n                onChanged: this.onVerifyChanged,\n            } as UiTextItem, \n            submit: {\n                widget: 'button', \n                className: 'btn btn-primary btn-block mt-3', \n                label: '下一步 >',\n                disabled: true\n            } as UiButton,\n        }\n    }\n    async open() {\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let verify = this.controller.verify = context.getValue('verify');\n        let ret = await userApi.checkVerify(this.controller.account, verify);\n        if (ret === 0) {\n            context.setError('verify', '验证码错误');\n            return;\n        }\n        this.controller.toPassword();\n    }\n    private page = ():JSX.Element => {\n        let typeText:string, extra:any;\n        switch (this.controller.type) {\n            case 'mobile': typeText = '手机号'; break;\n            case 'email': \n                typeText = '邮箱'; \n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\n                break;\n        }\n        return <Page header=\"验证码\">\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                验证码已经发送到{typeText}<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                {extra}\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema} \n                    onButtonClick={this.onSubmit} requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass PasswordPage extends VPage<RegisterController> {\n    private schema: Schema = [\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\n        {name: 'submit', type: 'submit'},\n    ]\n    private uiSchema: UiSchema;\n    async open() {\n        this.uiSchema = {\n            items: {\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\n            }\n        }\n        this.openPage(this.page);\n    }\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values = context.form.data;\n        let {pwd, rePwd} = values;\n        if (!pwd || pwd !== rePwd) {\n            context.setValue('pwd', '');\n            context.setValue('rePwd', '');\n            return '密码错误，请重新输入密码！';\n        }\n        this.controller.password = pwd;\n        return await this.controller.execute();\n    }\n    private page = ():JSX.Element => {\n        return <Page header={this.controller.passwordPageCaption}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                注册账号<br/>\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\n                <div className=\"h-1c\" />\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \n                    onButtonClick={this.onSubmit} requiredFlag={false} />\n            </div>\n        </Page>\n    }\n}\n\nclass RegSuccess extends VPage<RegisterController> {\n    async open() {\n        this.openPage(this.page);\n    }\n\n    private page = () => {\n        const {account, successText} = this.controller;\n        return (\n        <Page header={false}>\n            <div className=\"container w-max-30c\">\n                <form className=\"my-5\">\n                    <div className=\"py-5\">\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\n                    </div>\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\n                        直接登录\n                    </button>\n                </form>\n            </div>\n        </Page>\n        );\n    }\n}\n\n\n/*\nexport default class Register extends React.Component {\n    async onSubmit(name:string, context:Context):Promise<string> {\n        let values = context.form.data;\n        let {user, pwd, rePwd, country, mobile, email} = values;\n        if (pwd !== rePwd) {\n            context.setValue('pwd', '');\n            context.setValue('rePwd', '');\n            return '密码错误，请重新输入密码！';\n        }\n        let ret = await userApi.register({\n            nick: undefined,\n            user: user, \n            pwd: pwd,\n            country: undefined,\n            mobile: undefined,\n            email: undefined,\n        });\n        let msg:any;\n        switch (ret) {\n            default: throw 'unknown return';\n            case 0:\n                nav.clear();\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\n                return;\n            case 1:\n                msg = '用户名 ' + user;\n                break;\n            case 2:\n                msg = '手机号 +' + country + ' ' + mobile;\n                break;\n            case 3:\n                msg = '电子邮件 ' + email;\n                break;\n        }\n        return msg + ' 已经被注册过了';\n    }\n    click() {\n        nav.replace(<LoginView />);\n    }\n\n    render() {\n        return <Page header='账号注册'>\n            <div style={{\n                maxWidth:'25em',\n                margin: '3em auto',\n                padding: '0 3em',\n            }}>\n                <div className='container' style={{display:'flex', position:'relative'}}>\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\n                    <span style={{flex:1,\n                        fontSize: 'x-large',\n                        alignSelf: 'center',\n                        textAlign: 'center',\n                        margin: '10px',\n                    }}>同花</span>\n                </div>\n                <div style={{height:'20px'}} />\n                <Form schema={schema} uiSchema={uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\n            </div>\n        </Page>;\n    }\n}\n*/","import * as React from 'react';\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\nimport { RegisterController, ForgetController } from './register';\n//import Forget from './forget';\nimport userApi from './userApi';\nimport { LoginRes, loginRes } from './res';\nimport { tonvaTop, getSender } from './tools';\nimport { User } from 'tonva-tools/user';\n\nconst schema: Schema = [\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\n    {name: 'login', type: 'submit'},\n];\n\nexport interface LoginProps {\n    withBack?: boolean;\n    callback?: (user:User) => Promise<void>\n}\n\nexport default class Login extends React.Component<LoginProps> {\n    private res: LoginRes = resLang(loginRes);\n    private uiSchema: UiSchema = {\n        items: {\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem, \n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\n        }\n    }\n    \n    private onSubmit = async (name:string, context:Context):Promise<string> => {\n        let values = context.form.data;\n        let un = values['username'];\n        let pwd = values['password'];\n        if (pwd === undefined) {\n            return 'something wrong, pwd is undefined';\n        }\n        let user = await userApi.login({\n            user: un, \n            pwd: pwd,\n            guest: nav.guest,\n        });\n\n        if (user === undefined) {\n            let sender = getSender(un);\n            let type:string = sender !== undefined? sender.caption : '用户名';\n            return type + '或密码错！';\n        }\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\n        await nav.logined(user, this.props.callback);\n    }\n    private clickReg = () => {\n        //nav.replace(<RegisterView />);\n        let register = new RegisterController(undefined);\n        register.start();\n    }\n    private clickForget = () => {\n        let forget = new ForgetController(undefined);\n        forget.start();\n    }\n    render() {\n        let footer = <div className='text-center'>\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\n                onClick={this.clickReg}>\n                注册账号\n            </button>\n        </div>;\n        let header:string|boolean|JSX.Element = false;\n        let top:any;\n        if (this.props.withBack === true) {\n            header = '登录';\n            top = <>登录账号</>;\n        }\n        else {\n            top = tonvaTop;\n        }\n        return <Page header={header} footer={footer}>\n            <div className=\"w-max-20c my-5 py-5\"\n                style={{marginLeft:'auto', marginRight:'auto'}}>\n                {top}\n                <div className=\"h-3c\" />\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\n                <button className=\"btn btn-link btn-block\"\n                    onClick={() => this.clickForget()}>\n                    忘记密码\n                </button>\n            </div>\n        </Page>;\n    }\n}\n"],"sourceRoot":""}